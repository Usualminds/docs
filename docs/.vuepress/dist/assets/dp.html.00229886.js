import{r as o,o as u,c as r,a,w as t,b as n,F as i,d as p,e as s}from"./app.8eeab1a8.js";import{_ as k}from"./plugin-vue_export-helper.21dcd24c.js";const b={},m=p('<h1 id="\u52A8\u6001\u89C4\u5212" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u89C4\u5212" aria-hidden="true">#</a> \u52A8\u6001\u89C4\u5212</h1><p>\u52A8\u6001\u89C4\u5212\u56DB\u8981\u7D20</p><ul><li>\u72B6\u6001\u5B9A\u4E49</li><li>\u8F6C\u79FB\u65B9\u7A0B</li><li>\u521D\u59CB\u72B6\u6001</li><li>\u8FD4\u56DE\u503C</li></ul><h2 id="\u6253\u5BB6\u52AB\u820D" tabindex="-1"><a class="header-anchor" href="#\u6253\u5BB6\u52AB\u820D" aria-hidden="true">#</a> \u6253\u5BB6\u52AB\u820D</h2><p>\u4F60\u662F\u4E00\u4E2A\u4E13\u4E1A\u7684\u5C0F\u5077\uFF0C\u8BA1\u5212\u5077\u7A83\u6CBF\u8857\u7684\u623F\u5C4B\u3002\u6BCF\u95F4\u623F\u5185\u90FD\u85CF\u6709\u4E00\u5B9A\u7684\u73B0\u91D1\uFF0C\u5F71\u54CD\u4F60\u5077\u7A83\u7684\u552F\u4E00\u5236\u7EA6\u56E0\u7D20\u5C31\u662F\u76F8\u90BB\u7684\u623F\u5C4B\u88C5\u6709\u76F8\u4E92\u8FDE\u901A\u7684\u9632\u76D7\u7CFB\u7EDF\uFF0C\u5982\u679C\u4E24\u95F4\u76F8\u90BB\u7684\u623F\u5C4B\u5728\u540C\u4E00\u665A\u4E0A\u88AB\u5C0F\u5077\u95EF\u5165\uFF0C\u7CFB\u7EDF\u4F1A\u81EA\u52A8\u62A5\u8B66\u3002</p><p>\u7ED9\u5B9A\u4E00\u4E2A\u4EE3\u8868\u6BCF\u4E2A\u623F\u5C4B\u5B58\u653E\u91D1\u989D\u7684\u975E\u8D1F\u6574\u6570\u6570\u7EC4\uFF0C\u8BA1\u7B97\u4F60 \u4E0D\u89E6\u52A8\u8B66\u62A5\u88C5\u7F6E\u7684\u60C5\u51B5\u4E0B \uFF0C\u4E00\u591C\u4E4B\u5185\u80FD\u591F\u5077\u7A83\u5230\u7684\u6700\u9AD8\u91D1\u989D\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><ul><li><p>\u793A\u4F8B 1\uFF1A</p><ul><li>\u8F93\u5165\uFF1A[1, 2, 3, 4, 5]</li><li>\u8F93\u51FA\uFF1A\u6B64\u5217\u8868\u4E2D\u7684\u7ED3\u70B9 3(\u5E8F\u5217\u5316\u5F62\u5F0F\uFF1A[3, 4, 5]),\u8FD4\u56DE\u7684\u7ED3\u70B9\u503C\u4E3A 3 \u3002 (\u6D4B\u8BC4\u7CFB\u7EDF\u5BF9\u8BE5\u7ED3\u70B9\u5E8F\u5217\u5316\u8868\u8FF0\u662F[3, 4, 5]) \u3002\u6CE8\u610F\uFF0C\u6211\u4EEC\u8FD4\u56DE\u4E86\u4E00\u4E2A ListNode \u7C7B\u578B\u7684\u5BF9\u8C61 ans\uFF0C\u8FD9\u6837\uFF1Aans.val = 3, ans.next.val = 4, ans.next.next.val = 5, \u4EE5\u53CA ans.next.next.next = NULL.</li></ul></li><li><p>\u793A\u4F8B\xA02\uFF1A</p><ul><li>\u8F93\u5165\uFF1A[1, 2, 3, 4, 5, 6]</li><li>\u8F93\u51FA\uFF1A\u6B64\u5217\u8868\u4E2D\u7684\u7ED3\u70B9 4(\u5E8F\u5217\u5316\u5F62\u5F0F\uFF1A[4, 5, 6]),\u7531\u4E8E\u8BE5\u5217\u8868\u6709\u4E24\u4E2A\u4E2D\u95F4\u7ED3\u70B9\uFF0C\u503C\u5206\u522B\u4E3A 3 \u548C 4\uFF0C\u6211\u4EEC\u8FD4\u56DE\u7B2C\u4E8C\u4E2A\u7ED3\u70B9\u3002</li></ul></li></ul></div>',7),d=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * Definition for singly-linked list.
 * class ListNode `),n("span",{class:"token punctuation"},"{"),s(`
 *     val: number
 *     next: ListNode | null
 *     constructor(val?: number, next?: ListNode | null) `),n("span",{class:"token punctuation"},"{"),s(`
 *         this.val = (val===undefined ? 0 : val)
 *         this.next = (next===undefined ? null : next)
 *     `),n("span",{class:"token punctuation"},"}"),s(`
 * `),n("span",{class:"token punctuation"},"}"),s(`
 */`)]),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"middleNode"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token operator"},":"),s(" ListNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" ListNode "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" slow "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},","),s(" fast "),n("span",{class:"token operator"},"="),s(` head

    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("fast "),n("span",{class:"token operator"},"&&"),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        slow `),n("span",{class:"token operator"},"="),s(" slow"),n("span",{class:"token punctuation"},"."),s(`next
        fast `),n("span",{class:"token operator"},"="),s(" fast"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},"."),s(`next
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(` slow
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br")])],-1),h=p(`<h2 id="\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6" tabindex="-1"><a class="header-anchor" href="#\u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6" aria-hidden="true">#</a> \u80A1\u7968\u7684\u6700\u5927\u5229\u6DA6</h2><p>\u5047\u8BBE\u628A\u67D0\u80A1\u7968\u7684\u4EF7\u683C\u6309\u7167\u65F6\u95F4\u5148\u540E\u987A\u5E8F\u5B58\u50A8\u5728\u6570\u7EC4\u4E2D\uFF0C\u8BF7\u95EE\u4E70\u5356\u8BE5\u80A1\u7968\u4E00\u6B21\u53EF\u80FD\u83B7\u5F97\u7684\u6700\u5927\u5229\u6DA6\u662F\u591A\u5C11\uFF1F</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><ul><li><p>\u793A\u4F8B 1:</p><ul><li>\u8F93\u5165: [7,1,5,3,6,4]</li><li>\u8F93\u51FA: 5</li><li>\u89E3\u91CA: \u5728\u7B2C 2 \u5929\uFF08\u80A1\u7968\u4EF7\u683C = 1\uFF09\u7684\u65F6\u5019\u4E70\u5165\uFF0C\u5728\u7B2C 5 \u5929\uFF08\u80A1\u7968\u4EF7\u683C = 6\uFF09\u7684\u65F6\u5019\u5356\u51FA\uFF0C\u6700\u5927\u5229\u6DA6 = 6-1 = 5 \u3002 \u6CE8\u610F\u5229\u6DA6\u4E0D\u80FD\u662F 7-1 = 6, \u56E0\u4E3A\u5356\u51FA\u4EF7\u683C\u9700\u8981\u5927\u4E8E\u4E70\u5165\u4EF7\u683C\u3002</li></ul></li><li><p>\u793A\u4F8B 2:</p><ul><li>\u8F93\u5165: [7,6,4,3,1]</li><li>\u8F93\u51FA: 0</li><li>\u89E3\u91CA: \u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B, \u6CA1\u6709\u4EA4\u6613\u5B8C\u6210, \u6240\u4EE5\u6700\u5927\u5229\u6DA6\u4E3A 0\u3002</li></ul></li></ul></div><h3 id="\u66B4\u529B\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u66B4\u529B\u6CD5" aria-hidden="true">#</a> \u66B4\u529B\u6CD5</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">prices</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>
        <span class="token keyword">let</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> profit <span class="token operator">=</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>profit <span class="token operator">&gt;</span> maxprofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    maxprofit <span class="token operator">=</span> profit<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="\u4E00\u6B21\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u4E00\u6B21\u904D\u5386" aria-hidden="true">#</a> \u4E00\u6B21\u904D\u5386</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>prices<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> min <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" tabindex="-1"><a class="header-anchor" href="#\u793C\u7269\u7684\u6700\u5927\u4EF7\u503C" aria-hidden="true">#</a> \u793C\u7269\u7684\u6700\u5927\u4EF7\u503C</h2><p>\u5728\u4E00\u4E2A m*n \u7684\u68CB\u76D8\u7684\u6BCF\u4E00\u683C\u90FD\u653E\u6709\u4E00\u4E2A\u793C\u7269\uFF0C\u6BCF\u4E2A\u793C\u7269\u90FD\u6709\u4E00\u5B9A\u7684\u4EF7\u503C\uFF08\u4EF7\u503C\u5927\u4E8E 0\uFF09\u3002\u4F60\u53EF\u4EE5\u4ECE\u68CB\u76D8\u7684\u5DE6\u4E0A\u89D2\u5F00\u59CB\u62FF\u683C\u5B50\u91CC\u7684\u793C\u7269\uFF0C\u5E76\u6BCF\u6B21\u5411\u53F3\u6216\u8005\u5411\u4E0B\u79FB\u52A8\u4E00\u683C\u3001\u76F4\u5230\u5230\u8FBE\u68CB\u76D8\u7684\u53F3\u4E0B\u89D2\u3002\u7ED9\u5B9A\u4E00\u4E2A\u68CB\u76D8\u53CA\u5176\u4E0A\u9762\u7684\u793C\u7269\u7684\u4EF7\u503C\uFF0C\u8BF7\u8BA1\u7B97\u4F60\u6700\u591A\u80FD\u62FF\u5230\u591A\u5C11\u4EF7\u503C\u7684\u793C\u7269\uFF1F</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><ul><li>\u793A\u4F8B 1\uFF1A <ul><li>\u8F93\u5165:<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>\u8F93\u51FA: 12</li><li>\u89E3\u91CA: \u8DEF\u5F84 1\u21923\u21925\u21922\u21921 \u53EF\u4EE5\u62FF\u5230\u6700\u591A\u4EF7\u503C\u7684\u793C\u7269</li></ul></li></ul></div>`,10),f=n("div",{class:"language-typescript ext-ts line-numbers-mode"},[n("pre",{class:"language-typescript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"maxValue"),n("span",{class:"token punctuation"},"("),s("grid"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" row "),n("span",{class:"token operator"},"="),s(" grid"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},","),s(" column "),n("span",{class:"token operator"},"="),s(" grid"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),s(`length

    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" row"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" j "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" j "),n("span",{class:"token operator"},"<"),s(" column"),n("span",{class:"token punctuation"},";"),s(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" j "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"continue"),s(`

            `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                grid`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" grid"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("j "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                grid`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" grid"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
                grid`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),s("grid"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" grid"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"return"),s(" grid"),n("span",{class:"token punctuation"},"["),s("row "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("column "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br")])],-1),y=p(`<h2 id="\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u628A\u6570\u5B57\u7FFB\u8BD1\u6210\u5B57\u7B26\u4E32</h2><p>\u7ED9\u5B9A\u4E00\u4E2A\u6570\u5B57\uFF0C\u6211\u4EEC\u6309\u7167\u5982\u4E0B\u89C4\u5219\u628A\u5B83\u7FFB\u8BD1\u4E3A\u5B57\u7B26\u4E32\uFF1A0 \u7FFB\u8BD1\u6210 \u201Ca\u201D \uFF0C1 \u7FFB\u8BD1\u6210 \u201Cb\u201D\uFF0C\u2026\u2026\uFF0C11 \u7FFB\u8BD1\u6210 \u201Cl\u201D\uFF0C\u2026\u2026\uFF0C25 \u7FFB\u8BD1\u6210 \u201Cz\u201D\u3002\u4E00\u4E2A\u6570\u5B57\u53EF\u80FD\u6709\u591A\u4E2A\u7FFB\u8BD1\u3002\u8BF7\u7F16\u7A0B\u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570\uFF0C\u7528\u6765\u8BA1\u7B97\u4E00\u4E2A\u6570\u5B57\u6709\u591A\u5C11\u79CD\u4E0D\u540C\u7684\u7FFB\u8BD1\u65B9\u6CD5\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><ul><li>\u8F93\u5165: 12258</li><li>\u8F93\u51FA: 5</li><li>\u89E3\u91CA: 12258 \u6709 5 \u79CD\u4E0D\u540C\u7684\u7FFB\u8BD1\uFF0C\u5206\u522B\u662F&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;\u548C&quot;mzi&quot;</li></ul></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">translateNum</span><span class="token punctuation">(</span>num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        pre <span class="token operator">=</span> cur
        cur <span class="token operator">=</span> result 
        result <span class="token operator">=</span> <span class="token number">0</span>
        result <span class="token operator">+=</span> cur

        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>

        <span class="token keyword">let</span> sub <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">+=</span> pre
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u6700\u957F\u4E0D\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32</h2>`,5),w=s("\u{1F449} "),g={href:"https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},x=s("Leetcode \u94FE\u63A5"),v=p(`<p>\u8BF7\u4ECE\u5B57\u7B26\u4E32\u4E2D\u627E\u51FA\u4E00\u4E2A\u6700\u957F\u7684\u4E0D\u5305\u542B\u91CD\u590D\u5B57\u7B26\u7684\u5B50\u5B57\u7B26\u4E32\uFF0C\u8BA1\u7B97\u8BE5\u6700\u957F\u5B50\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><ul><li>\u793A\u4F8B\xA01: <ul><li>\u8F93\u5165: &quot;abcabcbb&quot;</li><li>\u8F93\u51FA: 3</li><li>\u89E3\u91CA: \u56E0\u4E3A\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32\u662F &quot;abc&quot;\uFF0C\u6240\u4EE5\u5176\u957F\u5EA6\u4E3A 3\u3002</li></ul></li><li>\u793A\u4F8B 2: <ul><li>\u8F93\u5165: &quot;bbbbb&quot;</li><li>\u8F93\u51FA: 1</li><li>\u89E3\u91CA: \u56E0\u4E3A\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32\u662F &quot;b&quot;\uFF0C\u6240\u4EE5\u5176\u957F\u5EA6\u4E3A 1\u3002</li></ul></li></ul></div><blockquote><p>\u601D\u8DEF\uFF1A\u901A\u8FC7\u54C8\u5E0C\u8868\u8BB0\u5F55\u91CD\u590D\u5B57\u7B26\u51FA\u73B0\u5BF9\u4F4D\u7F6E\uFF0C\u8F6C\u79FB\u516C\u5F0F <code>max(dp[j - 1], dp[j])</code></p></blockquote><h3 id="\u54C8\u5E0C\u8868-\u52A8\u6001\u89C4\u5212" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u8868-\u52A8\u6001\u89C4\u5212" aria-hidden="true">#</a> \u54C8\u5E0C\u8868+\u52A8\u6001\u89C4\u5212</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> char <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> right<span class="token punctuation">)</span>

        temp <span class="token operator">=</span> temp <span class="token operator">&lt;</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span>

        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="\u54C8\u5E0C\u8868-\u53CC\u6307\u9488" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u8868-\u53CC\u6307\u9488" aria-hidden="true">#</a> \u54C8\u5E0C\u8868+\u53CC\u6307\u9488</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> char <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
            left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="\u6700\u957F\u4E0A\u5347\u5B50\u5E8F\u5217" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u4E0A\u5347\u5B50\u5E8F\u5217" aria-hidden="true">#</a> \u6700\u957F\u4E0A\u5347\u5B50\u5E8F\u5217</h2>`,8),_=s("\u{1F449} "),j={href:"https://leetcode-cn.com/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},q=s("\u9898\u76EE\u94FE\u63A5"),N=p(`<p>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums \uFF0C\u627E\u5230\u5176\u4E2D\u6700\u957F\u4E25\u683C\u9012\u589E\u5B50\u5E8F\u5217\u7684\u957F\u5EA6\u3002</p><p>\u5B50\u5E8F\u5217\u662F\u7531\u6570\u7EC4\u6D3E\u751F\u800C\u6765\u7684\u5E8F\u5217\uFF0C\u5220\u9664\uFF08\u6216\u4E0D\u5220\u9664\uFF09\u6570\u7EC4\u4E2D\u7684\u5143\u7D20\u800C\u4E0D\u6539\u53D8\u5176\u4F59\u5143\u7D20\u7684\u987A\u5E8F\u3002\u4F8B\u5982\uFF0C[3,6,2,7] \u662F\u6570\u7EC4 [0,3,1,6,2,2,7] \u7684\u5B50\u5E8F\u5217\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u793A\u4F8B</p><ul><li>\u8F93\u5165\uFF1Anums = [10,9,2,5,3,7,101,18]</li><li>\u8F93\u51FA\uFF1A4</li><li>\u89E3\u91CA\uFF1A\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u662F [2,3,7,101]\uFF0C\u56E0\u6B64\u957F\u5EA6\u4E3A 4</li></ul></div><p>\u8F6C\u79FB\u516C\u5F0F <code>dp[i] = max(dp[i], dp[j] + 1), j&lt;i</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> max
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570" tabindex="-1"><a class="header-anchor" href="#\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570" aria-hidden="true">#</a> \u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570</h2>`,6),L=s("\u{1F449} "),M={href:"https://leetcode-cn.com/problems/number-of-longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},z=s("\u9898\u76EE\u94FE\u63A5"),S=p(`<p>\u7ED9\u5B9A\u4E00\u4E2A\u672A\u6392\u5E8F\u7684\u6574\u6570\u6570\u7EC4\uFF0C\u627E\u5230\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\u7684\u4E2A\u6570\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u793A\u4F8B</p><ul><li>\u8F93\u5165\uFF1A[1,3,5,4,7]</li><li>\u8F93\u51FA\uFF1A2</li><li>\u89E3\u91CA\uFF1A\u6709\u4E24\u4E2A\u6700\u957F\u9012\u589E\u5B50\u5E8F\u5217\uFF0C\u5206\u522B\u662F [1, 3, 4, 7] \u548C[1, 3, 5, 7]\u3002</li></ul></div><p>\u8F6C\u79FB\u516C\u5F0F\uFF1A<code>dp[i] = max(dp[i], dp[j] + 1), 0\u2264j&lt;i &amp;&amp; num[j]&lt;num[i]</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
                    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            res <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">===</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div>`,4);function C(I,A){const c=o("CodeGroupItem"),l=o("CodeGroup"),e=o("ExternalLinkIcon");return u(),r(i,null,[m,a(l,null,{default:t(()=>[a(c,{title:"TS",active:""},{default:t(()=>[d]),_:1})]),_:1}),h,a(l,null,{default:t(()=>[a(c,{title:"TS",active:""},{default:t(()=>[f]),_:1})]),_:1}),y,n("blockquote",null,[n("p",null,[w,n("a",g,[x,a(e)])])]),v,n("blockquote",null,[n("p",null,[_,n("a",j,[q,a(e)])])]),N,n("blockquote",null,[n("p",null,[L,n("a",M,[z,a(e)])])]),S],64)}var O=k(b,[["render",C]]);export{O as default};
